"""
Django settings for the 'authentication' microservice.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from os import getenv
from dotenv import load_dotenv

# === 1. Chemins dynamiques ===
# Base directory for the Django project.
BASE_DIR = Path(__file__).resolve().parent  # backend/authentication/api/
TOURNAMENT_DIR = BASE_DIR.parent  # backend/authentication/
SERVICES_DIR = TOURNAMENT_DIR.parent  # backend/

DOTENV_PATH = BASE_DIR.parent.parent.parent / '.env'
load_dotenv(DOTENV_PATH)

IP_ADDRESS = getenv("IP_ADDRESS")

# === 2. Sécurité ===
# The secret key is used for cryptographic signing. Keep it secret in production.
SECRET_KEY = getenv("DJANGO_SECRET_KEY")

# Debug mode should only be enabled during development.
DEBUG = True

# Hosts allowed to connect to this microservice.
ALLOWED_HOSTS = [
    "*",  # Allows all hosts (useful in development or testing).
]

# === 3. Applications Django ===
# Installed apps required for the microservice.
INSTALLED_APPS = [
	'daphne',
    'django.contrib.admin',  # Admin panel
    'django.contrib.auth',  # Authentication framework
    'django.contrib.contenttypes',  # Content types for models
    'django.contrib.sessions',  # Session framework
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files management
    "rest_framework",  # Django REST Framework for API development
	"api",  # The specific app for this microservice
    "channels",  # Channels for WebSockets
]

# === 4. Middleware ===
# Middleware intercepts and processes requests/responses.
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Security-related headers
    "django.contrib.sessions.middleware.SessionMiddleware",  # Session handling
    "django.middleware.common.CommonMiddleware",  # Common HTTP operations
    "django.middleware.csrf.CsrfViewMiddleware",  # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # User authentication
    "django.contrib.messages.middleware.MessageMiddleware",  # Messaging framework
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Protection against clickjacking
]

# === 5. Routes principales et application WSGI ===
# Main URL configuration for the project.
ROOT_URLCONF = 'api.urls'

# Templates configuration for rendering HTML pages.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Template engine
        'DIRS': [],  # Directories for additional templates (none here)
        'APP_DIRS': True,  # Load templates from installed apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Debugging context
                'django.template.context_processors.request',  # Add the request object to the context
                'django.contrib.auth.context_processors.auth',  # Authentication context
                'django.contrib.messages.context_processors.messages',  # Messaging context
            ],
        },
    },
]

# Application server for synchronous requests (WSGI).
WSGI_APPLICATION = 'api.wsgi.application'
ASGI_APPLICATION = 'api.asgi.application'

# === 6. Base de données ===
# Configuration for connecting to PostgreSQL database.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Database backend for PostgreSQL
        'NAME': getenv("POSTGRES_DB"),  # Database name
        'USER': getenv("POSTGRES_USER"),  # Username for the database
        'PASSWORD': getenv("POSTGRES_PASSWORD"),  # Password
        'HOST': getenv("POSTGRES_HOST"),  # Database host
        'PORT': getenv("POSTGRES_PORT"),  # Database port
    }
}


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# === 7. Validation des mots de passe ===
# Validators ensure secure password policies.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# === 8. Internationalisation ===
# Settings for language and timezone.
LANGUAGE_CODE = 'en-us'  # Language for the project
TIME_ZONE = "Europe/Paris"  # Set timezone to Paris
USE_I18N = True  # Enable internationalization
USE_TZ = True  # Enable timezone support

# === 9. Fichiers statiques ===
# Configuration for static files (CSS, JavaScript, images).
STATIC_URL = '/static/'  # Public URL for static files
STATIC_ROOT = TOURNAMENT_DIR / 'static/'  # Directory where static files are collected

# === 10. Authentification ===
# Use a custom user model (Player).
AUTH_USER_MODEL = "api.Player"

USE_X_FORWARDED_HOST = True

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],  # Assure-toi que Redis tourne bien
        },
    },
}
