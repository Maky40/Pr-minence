worker_processes auto;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
}

http {
    # Bloc pour la redirection HTTP vers HTTPS
	access_log /var/log/nginx/access.log;

    server {
        listen 80;
        server_name 42pong.bounceme.net;

        # Redirection vers HTTPS
        return 301 https://42pong.bounceme.net$request_uri;
    }

    # Bloc pour HTTPS
    server {
        listen 443 ssl;
        server_name 42pong.bounceme.net;

        # Certificats SSL
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
        add_header Expires "0";
        expires 0;


        # Inclure les types MIME standard
        include /etc/nginx/mime.types;

        location /scripts/ {
            alias /usr/share/nginx/html/scripts/;
            try_files $uri $uri/ =404;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            # SpÃ©cifier explicitement le type MIME pour les fichiers JavaScript
            default_type application/javascript;
        }

        location /services/ {
            alias /usr/share/nginx/html/services/;
            try_files $uri $uri/ =404;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            # SpÃ©cifier explicitement le type MIME pour les fichiers JavaScript
            default_type application/javascript;
        }
        # Serveur Frontend
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Reverse Proxy vers "player"
        location /player/ {
            proxy_pass https://player:8010/;
			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_verify off;
        }

		location /authentication/ws/online/ {
			proxy_pass https://authentication:8001/ws/online/;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_cache_bypass $http_upgrade;

			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate_key /etc/nginx/certs/server.key;
			proxy_ssl_verify off;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /pong/ws/pong/ {
			proxy_pass https://pong:8003/ws/pong/;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_cache_bypass $http_upgrade;

			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate_key /etc/nginx/certs/server.key;
			proxy_ssl_verify off;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /chat/ws/chat/ {
			proxy_pass https://chat:8002/ws/chat/;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_cache_bypass $http_upgrade;

			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate_key /etc/nginx/certs/server.key;
			proxy_ssl_verify off;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}

		location /chat/ {
		proxy_pass https://chat:8002/;
		proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
		proxy_ssl_verify off;
		}

        # Reverse Proxy vers "authentication"
        location /authentication/ {
            proxy_pass https://authentication:8001/;
			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_verify off;
        }


		location /pong/ {
            proxy_pass https://pong:8003/;
			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_verify off;
        }



		location /tournament/ws/matchmaking/ {
			proxy_pass https://tournament:8004/ws/matchmaking/;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_cache_bypass $http_upgrade;

			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_certificate_key /etc/nginx/certs/server.key;
			proxy_ssl_verify off;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}
		location /tournament/ {
            proxy_pass https://tournament:8004/;
			proxy_ssl_trusted_certificate /etc/nginx/certs/server.crt;
			proxy_ssl_verify off;
        }

        # ðŸ“Œ Correction : Alias pour les fichiers statiques
        location /static/ {
            alias /usr/src/app/static/;
        }

        # ðŸ“Œ ðŸ”¥ **Correction ici : Servir les fichiers mÃ©dias correctement**
        location /player/media/ {
            alias /usr/src/app/media/;
            autoindex on;  # Optionnel : permet de lister les fichiers dans le navigateur
            access_log off;
            expires max;
        }
    }
}
