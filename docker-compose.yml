version: "3.3"

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Configuration générée
      - ./nginx/certs:/etc/nginx/certs:ro # Certificats SSL
      - ./frontend:/usr/share/nginx/html:ro # Fichiers frontend
      - ./backend/player/media:/usr/src/app/media
    networks:
      - app_network
    restart: always

  db:
    image: postgres:latest # Utilisation de l'image officielle PostgreSQL
    container_name: db
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data # Volume pour persister les données
    ports:
      - "5433:5432" # Port de la base de données accessible depuis l'hôte
    networks:
      - app_network
    restart: always

  player:
    build:
      context: ./backend/player
    container_name: player
    volumes:
      - ./backend/player/media:/usr/src/app/media # Volume pour la synchronisation des fichiers
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings # Variable d'environnement explicite
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - app_network
    restart: always

  authentication:
    build:
      context: ./backend/authentication
    container_name: authentication
    volumes:
      - ./backend/authentication:/usr/src/app # Volume pour la synchronisation des fichiers
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings # Variable d'environnement explicite
    ports:
      - "8001:8001"
    depends_on:
      - db
    networks:
      - app_network
    restart: always

  redis:
    image: redis:7
    networks:
      - app_network
    ports:
      - "6379:6379"

  chat:
    build:
      context: ./backend/chat
    container_name: chat
    volumes:
      - ./backend/chat:/usr/src/app # Volume pour la synchronisation des fichiers
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings # Variable d'environnement explicite
    ports:
      - "8002:8002"
    depends_on:
      - db
      - redis
    networks:
      - app_network
    restart: always

  pong:
    build:
      context: ./backend/pong
    container_name: pong
    volumes:
      - ./backend/pong:/usr/src/app # Volume pour la synchronisation des fichiers
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings # Variable d'environnement explicite
    ports:
      - "8003:8003"
    depends_on:
      - db
    networks:
      - app_network
    restart: always

volumes:
  pgdata: # Volume pour persister les données de la base de données

networks:
  app_network:
    driver: bridge
