services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Configuration Nginx
      - ./nginx/certs:/etc/nginx/certs:ro # Certificats SSL
      - ./frontend:/usr/share/nginx/html:ro # Fichiers frontend
      - ./backend/player/media:/usr/src/app/media
    networks:
      - app_network
    restart: always

  db:
    image: postgres:latest
    container_name: db
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data # Volume pour persister les données
    ports:
      - "5433:5432" # Port PostgreSQL accessible depuis l'hôte
    networks:
      - app_network
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    networks:
      - app_network
    # ports:
    #   - "6379:6379"
    restart: always

  player:
    build:
      context: ./backend/player
    container_name: player
    volumes:
      - ./backend/player/media:/usr/src/app/media # Volume pour synchronisation des fichiers
      - ./backend/player/api/static:/usr/src/app/static # Volume pour les fichiers statiques
      - ./nginx/certs:/etc/nginx/certs:ro
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings
    ports:
      - "8010:8010"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    restart: always

  authentication:
    build:
      context: ./backend/authentication
    container_name: authentication
    volumes:
      - ./backend/authentication:/usr/src/app # Volume pour synchronisation des fichiers
      - ./nginx/certs:/etc/nginx/certs:ro
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    restart: always

  chat:
    build:
      context: ./backend/chat
    container_name: chat
    volumes:
      - ./backend/chat:/usr/src/app # Volume pour synchronisation des fichiers
      - ./nginx/certs:/etc/nginx/certs:ro # Ajout du volume pour le SSL
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

    networks:
      - app_network
    restart: always

  pong:
    build:
      context: ./backend/pong
    container_name: pong
    volumes:
      - ./backend/pong:/usr/src/app # Volume pour synchronisation des fichiers
      - ./nginx/certs:/etc/nginx/certs:ro
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings
    ports:
      - "8003:8003"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    restart: always

  tournament:
    build:
      context: ./backend/tournament
    container_name: tournament
    volumes:
      - ./backend/tournament:/usr/src/app # Volume pour synchronisation des fichiers
      - ./nginx/certs:/etc/nginx/certs:ro
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=api.settings
    ports:
      - "8004:8004"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    restart: always

volumes:
  pgdata: # Volume pour persister les données de la base de données

networks:
  app_network:
    driver: bridge
